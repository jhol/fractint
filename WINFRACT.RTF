{\rtf1\ansi \deff0\deflang1024{\fonttbl{\f0\fmodern Courier;}{\f1\froman Symbol;}{\f2\fswiss Arial;}{\f3\fmodern pica;}{\f4\fmodern Courier;}{\f5\froman timesroman;}{\f6\fmodern prestige;}{\f7\fmodern lettergothic;}
{\f8\fmodern gothicPS;}{\f9\fmodern cubicPS;}{\f10\fmodern LinePrinter;}{\f11\fswiss Helvetica;}{\f12\fmodern avantegarde;}{\f13\fmodern spartan;}{\f14\fmodern metro;}{\f15\fmodern presentation;}{\f16\fmodern APL;}{\f17\fmodern OCRA;}{\f18\fmodern OCRB;}
{\f19\froman boldPS;}{\f20\froman emperorPS;}{\f21\froman madaleine;}{\f22\froman zapf humanist;}{\f23\froman classic;}{\f24\froman roman f;}{\f25\froman roman g;}{\f26\froman roman h;}{\f27\fmodern elite;}{\f28\froman century;}{\f29\froman palantino;}
{\f30\froman souvenir;}{\f31\froman garamond;}{\f32\froman caledonia;}{\f33\froman bodini;}{\f34\froman university;}{\f35\fscript Script;}{\f36\fscript scriptPS;}{\f37\fscript script c;}{\f38\fscript script d;}{\f39\fscript commercial script;}
{\f40\fscript park avenue;}{\f41\fscript coronet;}{\f42\fscript script h;}{\f43\fscript greek;}{\f44\froman kana;}{\f45\froman hebrew;}{\f46\froman roman s;}{\f47\froman russian;}{\f48\froman roman u;}{\f49\froman roman v;}{\f50\froman roman w;}
{\f51\fdecor narrator;}{\f52\fdecor emphasis;}{\f53\fdecor zapf chancery;}{\f54\fdecor decor d;}{\f55\fdecor old english;}{\f56\fdecor decor f;}{\f57\fdecor decor g;}{\f58\fdecor cooper black;}{\f59\fnil linedraw;}{\f60\fnil math7;}{\f61\fnil math8;}
{\f62\fnil bar3of9;}{\f63\fnil EAN;}{\f64\fnil pcline;}{\f65\fnil tech h;}{\f66\fnil HelveticaTms Rmn;}{\f67\froman Times New Roman;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue127;\red0\green127\blue127;\red0\green127\blue0;\red127\green0\blue127;\red127\green0\blue0;\red127\green127\blue0;\red127\green127\blue127;\red192\green192\blue192;}
{\stylesheet{\s244 \fs16\up6\lang1033 \sbasedon0\snext0 footnote reference;}{\s245 \fs20\lang1033 \sbasedon0\snext245 footnote text;}{\fs20\lang1033 \snext0 Normal;}}{\info{\title Winfract on-line Documentation}{\subject Winfract}{\author Bert Tyler}
{\keywords winfract RTF}{\operator Bert Tyler}{\creatim\yr1991\mo6\dy16\hr13\min41}{\revtim\yr1993\mo11\dy7\hr10\min59}{\printim\yr1992\mo3\dy13\hr10\min33}{\version88}{\edmins734}{\nofpages27}{\nofwords5768}{\nofchars38625}{\vern16417}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0 \ftnbj \sectd \linex576\endnhere \pard\plain \sl240 \fs20\lang1033 {\plain \f2\lang1033 #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # main_index}}}{\plain \f2\lang1033 +
{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:005}}}{\plain \f2\lang1033 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Help Index}}}{\plain \f2\lang1033  }{\plain \b\f2\lang1033 Winfract (Fractint for Windows) }{\plain \f2\lang1033 

\par }\pard \sl240 {\plain \f2\lang1033 
\par }\pard \sl240 {\plain \b\f2\lang1033 Copyright (C) 1990-93 The Stone Soup Group.
\par }{\plain \b\f2\lang1033 
\par }\pard \sl240 {\plain \b\f2\lang1033 Winfract (Fractint for Windows) may be fr}{\plain \b\f2\lang1033 eely copied and distributed, but may not be sold.}{\plain \f2\lang1033 
\par }\pard \sl240 {\plain \f2\lang1033 
\par }\pard \sl240 {\plain \b\f2\lang1033 Help Topics}{\plain \f2\lang1033 
\par }\pard \sl240 {\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 What's New?}{\plain \v\f2\lang1033 whatsnew_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 File Menu}{\plain \v\f2\lang1033 file_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Fractals Menu}{\plain \v\f2\lang1033 fractals_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 View Menu}{\plain \v\f2\lang1033 view_options}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Colors Menu}{\plain \v\f2\lang1033 color_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Help Menu}{\plain \v\f2\lang1033 help_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Fractal Formula Selection}{\plain \v\f2\lang1033 formula_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Zooming in on an Image}{\plain \v\f2\lang1033 zoom_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Mandelbrot/Julia Toggling}{\plain \v\f2\lang1033 julia_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Color-Cycling}{\plain \v\f2\lang1033 cycling_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Fractint-Style Help and Prompts}{\plain \v\f2\lang1033 fractint_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Coordinate Box options}{\plain \v\f2\lang1033 CoordinateBox}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Limitations in Winfract}{\plain \v\f2\lang1033 bug_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 Distribution Policy, Contacti}{\plain \f2\uldb\lang1033 ng the Authors, The Book}{\plain \v\f2\lang1033 distrib_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab }{\plain \f2\uldb\lang1033 A list of Winfract and Fractint Authors}{\plain \v\f2\lang1033 authors_index}{\plain \f2\lang1033 
\par }{\plain \f2\lang1033 \tab \page }{\f2\up6 #{\footnote \pard\plain \fs20\lang1033 {\fs16\up6 #} whatsnew_index}}{\f2\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 $}{\f3  What's New in this Release?}}}{\f2\up6 +{\footnote \pard\plain 
\s245 \fs20\lang1033 {\f3\fs16\up6 +}{\f3  browse:007}}}{\f2\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 K}{\f3  Fractint Prompts;Fractint Help;Fractint Hotkeys}}}{\f2  
\par }\pard \sl240 {\b\f2 What's New in this Release?
\par }\pard {\f2 
\par }\pard {\f2 This release of Winfract is essentially the same as the version 17.50 that was included in the book "Fractals for Windows", but with the following enhancements:
\par }\pard {\f2 
\par }\pard {\f2 - The core fractal engine in this release is from Fractint 18.2.  All fractal types from Fractint 18.2 (with the exception of the 'julia_inverse' fractal type, which requires some extra logic we haven't yet added t}{\f2 
o Winfract) have been incorporated into this version of Winfract.
\par }\pard {\f2 
\par }\pard {\f2 
- The File Open, File SaveAs, and File Print options now use the new Windows-style "common dialog boxes", with the extra capabilities provided by those routines.   This is particularly handy if you're using Windows-for-Workgroups or Windows NT with their 
}{\f2 networking options.
\par }\pard {\f2 
\par }\pard {\f2 Despite the ridiculously long interval (2 1/2 months) between the release of Fractint 18.2 and this release of Winfract, this}{\i\f2  is }{\f2 a rushed release (long story involvi}{\f2 
ng "real work" deleted for lack of interest).  As a result, it very likely has a number of silly bugs in it that could be easily squashed if we'd only taken (or had the time to take) a reasonable review of the program before unleashing it on you, the unsu
}{\f2 specting public.  You can get your revenge, however, by reporting those bugs to Bert Tyler - see the }{\f2\uldb list of Authors}{\v\f2 authors_index}{\f2  for his email address or }{\f2\uldb Contacting the Authors}{\v\f2 distrib_index}{\f2 
  for alternate ways to reach him.
\par }\pard {\f2   
\par }\pard \sl240 {\plain \f2\lang1033 \page }{\f2\up6 #{\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 #}{\f3  fracti}{\f3 nt_index}}}{\f2\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 $}{\f3  Fractint-Style Help and Prompts}}}{
\f2\up6 +{\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 +}{\f3  browse:050}}}{\f2\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 K}{\f3  Fractint Prompts;Fractint Help;Fractint Hotkeys}}}{\f2  
\par }\pard \sl240 {\b\f2 Fractint-Style Help}{\b\f2  and Prompts
\par }\pard {\f2 
\par }\pard {\f2 
Fractint's hypertext-like online help (all 350+ screens' worth!) is available at the push of a button (specifically, the Control-F1 button - the F1 button brings up this Winfract-specific help system).  Note that Fractint's online help is just that - Frac
}{\f2 tint-specific online help.  While much of that help is common to both Fractint and Winfract, some of it (the sections on printing, the palette editor, and the 'V(iew)' options come to mind right away) describe items that have nothing to do w}{\f2 
ith the Winfract environment.  Also, Fractint's online help is not context-sensitive at the moment - you always start at Fractint's initial help index screen when you press Control-F1.
\par }\pard {\f2 
\par }\pard {\f2 
Many Fractint-style hot-keys are also available.  Depending on the status of the "Hot-key Actions" option (found in the "Options" menuitem), these hot-keys will either take you directly to the appropriate Winfract menu or to a text-based prompting screen 
}{\f2 directly from Fractint.  Note that some functions (printing and selec}{\f2 
ting video modes are prime examples) are so different between the DOS and Windows environments that you will be taken to a Windows-style menu even if you've selected Fractint-style prompts.
\par }\pard {\f2 
\par }\pard {\f2 The Fractint-style "Hot-Keys" and their actions are listed below.  Items marked with a "*" are not connected to a Fractint-style prompting screen and will always take you directly to a Windows-style equivalent.
\par }\pard {\f2 
\par }{\f2  T\tab Select Fractal Type
\par }{\f2  S\tab Save Fractal Image *
\par }{\f2  P\tab Print Fractal Image *
\par }{\f2  R\tab Restore Fractal Image
\par }{\f2  3\tab 3}{\f2 D Restore
\par }{\f2  O\tab 3D Overlay
\par }{\f2  X\tab Basic Options
\par }{\f2  Y\tab Extended Doodads
\par }{\f2  Z\tab Fractal Parameters
\par }{\f2  I\tab 3D Parameters
\par }{\f2  A\tab Starfields
\par }{\f2  @\tab Select Parameter file and item
\par }{\f2  B\tab Save Parameter item
\par }{\f2  L\tab Load Color-Map
\par }{\f2  W\tab Write (save) Color-Map *
\par }{\f2  DEL\tab Select Image Size *
\par }{\f2  INS\tab Reset All Options
\par }{\f2  TAB\tab Status display
\par }{\f2 
\par }\pard {\f2 In addition to the above, Winfract also responds to many of the Fractint-style color-cycling hot-keys:  'C', '+', '-', '<', '>', the four cursor keys, SPACE, and ENTER.  Unlike Fractint, you don't have to enter }{\f2 
"color-cycling mode" to use these keys - Color-Cycling mode and the main image mode are one and the same.
\par }\pard {\f2  
\par }\pard {\f2 
Many of Fractint's prompting screens have been also incorporated into Winfract.  Note that some of these screens list options that aren't connected to anything in the Winfract environment (the sound options on the 'X' screen come to mind).  However, those
}{\f2  of you who are used to Fractint's prompting screens may find this option more comfortable than the Windows menus.  Currently, these Fractint-style}{\f2 
 prompting screens are only selectable using the Hot-Keys (using the Windows menu-bars always gives you Windows-style entry screens), and then only if you have chosen "Fractint-style Prompts" as your "Hot-Key Options" default. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # bug_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Bugs and Limitations}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:060}}}{\f2 K
{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 K bugs;limitations}}}{\f2  
\par }\pard \sl240 {\b\f2 Limitations in Winfract}{\f2  
\par }{\f2 
\par }\pard \sl240 {\f2 
Fractint for Windows is (and will continue to be) a "port" of Fractint for DOS to the Windows environment, retaining the Fractint for DOS fractal and GIF engines, but replacing its front-end and graphics interface with a Windows engine.  As such}{\f2 
, its fractal engine will always "trail" that of Fractint for DOS (although hopefully not by much - the two 17.1 versions were uploaded within hours of each other), and the user interface will tend to do the same except where the Windows version adds func
}{\f2 tionality simply by virtue of the Windows interface.    
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 There are three main causes behind the various limitations of this program.  For future brevity, these causes are tagged FFD (problems related to the fact that much of the code is and will continue}{\f2 
 to be from Fractint For Dos), WLIM (limitations caused by Windows, or some Windows video/printer drivers that aren't limitations under MS-DOS), and NYI (Not Yet Implemented - hey, we're working on it!).  We used to hide behind a fourth excuse - calling o
}{\f2 urselves novice Windows programmers and using the "what can you expect?" claim - but folks quit believing that one.  FFD and WLIM limitations are probably permanent - hopefully NYI problems are less so. 
\par }\pard \sl240 {\f2 
\par }{\f2 At any rate, the major limitations of Winfract con}{\f2 tinue to be:
\par }{\f2 
\par }\pard \sl240 {\f2 
- You can run only one "instance" of Fractint for Windows.  FFD: Fractint for DOS is riddled with initialized FAR data ("char far myvalue = 0;"), and the Windows SDK silently but firmly tags any program containing code like that as a single-instance progr
}{\f2 am. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 - Palette support is limited.   WLIM: The "stock" VGA driver supplied with Win 3.0 doesn't support palette-modification by applications at all (most third-party 256-color SuperVGA drivers do, though).  "Plasma Clouds" look Godawful u}{
\f2 
sing anything less than a 256-color Windows driver.   Color-cycling is limited to video drivers which support palette-manipulation (and, for 16-color drivers, color-cycling affects the background windows as well).  Note that 16-bit and 24-bit "true color"
}{\f2  Windows video drivers don't *have* a palette to manipulate, so we can't color-cycle them.  
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 - Fractint for Windows is not as "background process" friendly as it should be when it updates the screen image - if it is updating a large image in its entirety}{\f2 
, it can grab the machine for seconds at a time.  FFD  and WLIM -  Windows only gives other programs a shot at the CPU when the currently active program volunteers to give up control, and the fractal engine that Winfract is based on only gives us the oppo
}{\f2 rtunity to do that when it calls the routine that checks the keyboard - an event that may happen only once a second or so. 
\par }\pard \sl240 {\f2  
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # file_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ File Commands}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:010}}}{\f2 K{\footnote 
\pard\plain \sl240 \fs20\lang1033 {\f3 K file;open;save;print;gif;bmp;3d;3d overlay;parameter files}}}{\f2 
\par }\pard \sl240 {\b\f2 File Menu}{\f2  
\par }{\f2 
\par }\pard \sl240 {\f2 File }{\b\f2 Open}{\f2  loads either Fractint-for-DOS-style or "generic" GIF files.  Note that the correct palette isn't c}{\f2 
ompletely displayed on the screen.  Windows "reserves" twenty palette values for its own use, and "adjusts" Fractint's images accordingly - and for 16-color drivers like the VGA driver supplied with Windows that don't support palette-manipulation by appli
}{\f2 cations programs, cheerfully ignores our attempts at palette-manipulation.   If the restored image is resumable , the  image will resume calculating as soon as it is loaded.  
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 File }{\b\f2 Save}{\f2  saves your current image (by default, as a GIF (version 89a) file, c}{\f2 
ompatible with  Fractint-for-DOS, your favorite DOS GIF viewers, and (of course) the "File Open" option, but  optionally as a BMP file).  Again, the palette you see on the screen may not be the one that the program is "using" (and gets saved to the disk f
}{\f2 ile).     If the saved image is resumable , the image will resume calculating as soon as it is finished saving.  Note that Winfract can only open GIF89a-format images as fractal images, and cannot open BMP-format images at all.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 File }{\b\f2 3D Open}{\f2  and File }{\b\f2 3D O}{\b\f2 verlay}{\f2 
 load in your image using "3D" transformations.   The 3D Open option clears your image first and then loads the new one, while the Overlay option leaves your original image intact and adds the new image over it.   
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 File }{\b\f2 Print}{\f2  does the best job it can sending the image to your printer.  The program does not "dither" for black-and-white printers - it just "candy stripes" adjacent colors the same way that Fractint-for-DOS does. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Read Batchfile}{\f2  and }{\b\f2 Write Batchfile}{\f2  load and save "batch-file" paramete}{\f2 
rs of your (and others) favorite images.  As soon as you Read a a batchfile image (saved as an entry in a PAR file such as FRACTINT.PAR ), Winfract will begin generating that image at whatever image size you are currently using.  The disadvantage to savin
}{\f2 
g your favorite images as PARameter files rather than GIF images is that Winfract has to recreate each image every time you select it.  The advantage is that you can fit a lot more formulas on your hard disk this way, and they're a tad easier to E-mail to
}{\f2  y}{\f2 our friends!
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 File }{\b\f2 Copy to Clipboard}{\f2 
 copies the currently-displayed image to the Windows clipboard (in "Device-Independent Bitmap" format) where your other Windows programs can collect it.   Note that, for 256-color video drivers and 256-color images, the colors in the clipboard won't visib
}{\f2 ly match the colors in Winfract's window until you change your "focus" to the clipboard's window.  That's because Winfract has warned the Clipboard that it is reserving the right to color-cycle its colors, so the Clipbo}{\f2 
ard is just using Windows' default 20 colors to display its colors while Winfract has control of the screen.   
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 GIF and "Graphics Interchange Format" are trademarks of CompuServe Incorporated, an H&R Block Company. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 \page }{\f2\up6 #{\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 #}{\f3  fractals_index}}}{\f2\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\f3\fs16\up6 $}{\f3  Fractal Options}}}{\fs16\up6 +{\footnote \pard\plain \s245 
\fs20\lang1033 {\fs16\up6 +} browse:015}}{\fs16\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 K} fractal parameters; 3d parameters;fractal options}}{\f2\fs16  
\par }\pard \sl240 {\b\f2 Fractals Options}{\f2 
\par }{\f2 
\par }\pard \sl240 {\b\f2 Fractal Formula}{\f2  brings up a dialog box letting you select from any of approximately 80 fractal types.  See the }{\f2\uldb Fractal Formula Selection}{\v\f2 formula_index}{\f2  for formula details.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Basic Options }{\f2  brings up a "Basic Options" menu that lets you select any of what we cons}{\f2 
ider the "basic" (mostly because we added them first) fractal options - various generation algorithms (single/dual pass, solid-guessing, boundary tracing, tesseral),  inside and outside coloring schemes, maximum iterations,  Biomorph and Decomposition opt
}{\f2 ions, etc .
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Extended Options}{\f2  brings up an "Extended Options" menu that lets you select any of what we consider to be "extended" (because we didn't think of them until later) fractal options, including Inversion and Continuous Potential.

\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Fractal Params}{\f2  brings up a "Fractal Parameters" menu that lets you select any modifiable parameters in your fractal type as well as the specific area you may want to zoom in on.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 3D Params }{\f2 brings up a "3D Parameters" menu that lets you select any modifiable 3D parameters in your fractal type.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Reset all Options}{\f2  resets all fractal-related options to the default state they were in when Winfract was first started.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 Once you have selected any of these options, Winfract will clear the image and regenerate it using the n}{\f2 ew options you have given it.
\par }\pard \sl240 {\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 \page }{\fs16\up6 #{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 #} view_options}}{\fs16\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 $} View Options}}{\fs16\up6 +{\footnote \pard\plain \s245 \fs20\lang1033 {
\fs16\up6 +} browse:020}}{\fs16\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 K} image size;zooming; zoom in;zoom out;zoom bar;image sizing;pixel-by-pixel updating;status report}}{\f2  
\par }\pard \sl240 {\b\f2 View Options
\par }{\b\f2 
\par }\pard \sl240 {\b\f2 Image Settings}{\f2  The }{\b\f2 Image Settings}{\f2 
 option lets you select either a pre-defined image size, or make up your own (up to an internal limit of 2048x2048) and select a two-color, 16-color, or 256-color image.  Those of you with 24-bit color video cards will have to hold yourself back to 256-co
}{\f2 lor images for the moment - the 256-color limit is one of the penalties of using the fractal engine from Fractint. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 If your image size is larger than your window,}{\f2  you can use the scroll bars in the window to scroll around your image. 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 If you have selected the "Window Sizing" option (see below), your image window will automatically re-size to the image size you have just selected.
\par }\pard \sl240 {\b\f2 
\par }\pard \sl240 {\b\f2 Zoom In}{\f2 , }{\b\f2 Zoom Out}{\f2 , and }{\b\f2 Zoom Bar }{\f2 toggles select which of three zooming options you want to use.  For details, see the help section on }{\f2\uldb Zooming in on an Image}{\v\f2 zoom_index}{\f2 .
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Coordinate Box }{\f2 toggles the display of an optional "Coordinate Box" displaying information about the pixel directly }{\f2 underneath your mouse pointer.  See the help section under }{\f2\uldb Coordinate Box}{\v\f2 CoordinateBox}{
\f2  for details.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Window Sizing }{\f2 toggles the "Window Sizing" option, in which the scroll-bars are eliminated and the image window is automatically sized to the size of your fractal image.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Pixel-By-Pixel Update}{\f2  toggles the "Pixel-By-Pixel Update" option, in which Winfract's normal method of updating its image in periodic chunks is changed to a "display every pixel as it is changed" strategy.  This approach is }{
\i\f2 extremely }{\f2 slo}{\f2 
w (Windows' overhead takes a heavy toll on programs that update their images this way), but it lets you see how Winfract is actually generating its images - try this using the Boundary Trace and Tesseral image-generation methods.
\par }\pard \sl240 {\f2 
\par }{\b\f2 HotKey Actions}{\f2  toggles whether the various "hot-keys" Winfract is sensitive to take you to
\par }\pard \sl240 {\f2 the same Windows-style menus accessed through the Windows menubar or "Fractint-style" prompting screens.  See the help section on }{\f2\uldb Fractint-Style Help and Prompts}{\v\f2 fractint_index}{\f2  for details}{\f2 .
\par }\pard \sl240 {\f2  
\par }\pard \sl240 {\b\f2 Status }{\f2 
Brings up a Status messagebox displaying the status of your current image (which formula you are using, its parameters and screen corners, and whether or not it's still being generated or has finished).  If the image is still being generated, Winfract con
}{\f2 tinues with it when you press the "OK" button. 
\par }\pard \sl240 {\b\f2 
\par }\pard \sl240 {\f2 \page }{\fs16\up6 #{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 #} color_index}}{\fs16\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 $} Color Options}}{\fs16\up6 +{\footnote \pard\plain \s245 \fs20\lang1033 {
\fs16\up6 +} browse:025}}{\fs16\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 K} colormaps;color-cycling;loading colormaps;saving colormaps}}{\f2  
\par }\pard \sl240 {\b\f2 Color Options}{\f2 
\par }{\f2 
\par }\pard \sl240 {\b\f2 Load Color-Map}{\f2  and }{\b\f2 Write Color-Map}{\f2  load and save external color-maps in the same manner as Fractint-for-DOS (within Windows' limitations).  
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\b\f2 Color-Cycling}{\f2  brings up }{\f2 a Color_Cycling Dialog box.  See the Help section on }{\f2\uldb Color_Cycling}{\v\f2 cycling_index}{\f2  for details.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 \page }{\fs16\up6 #{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 #} help_index}}{\fs16\up6 ${\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 $} Help Options}}{\fs16\up6 +{\footnote \pard\plain \s245 \fs20\lang1033 {
\fs16\up6 +} browse:030}}{\fs16\up6 K{\footnote \pard\plain \s245 \fs20\lang1033 {\fs16\up6 K} help;fractint-style help;about}}{\fs16\up6  }{\f2 
\par }\pard \sl240 {\b\f2 Help Options
\par }{\f2 
\par }{\b\f2 Index}{\f2  brings up this help system.  So does pressing the F1 key.
\par }{\f2 
\par }{\b\f2 Using Help}{\f2  brings up the standard Windows "help on Help" system.
\par }{\f2 
\par }\pard \sl240 {\b\f2 Fractint Help}{\f2  brings up Fractint-style help screens (all 350+ of them!)  So does pressing the Control-F1 key.  See the Help section on }{\f2\uldb Fractint-Style Help and Prompts}{\v\f2 fractint_index}{\f2  for details.
\par }\pard \sl240 {\f2 
\par }{\b\f2 About Winfract }{\f2 brings up a standard "About Box".
\par }{\f2 
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # formula_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Selecting a Fractal Formula}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:035}}}{
\f2 K{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 K fractal;formula}}}{\f2 
\par }\pard \sl240 {\b\f2 F}{\b\f2 ractal Formula Selection}{\f2  
\par }{\f2 
\par }\pard \sl240 {\f2 Using the Options }{\b\f2 Formula}{\f2 
 option, you can select any of over 80 fractal types (virtually every fractal type that is available in version 18.2 of Fractint-for-DOS).   After selecting a fractal type, a dialogue box pops up and prompts you for any formula parameters and the screen c
}{\f2 orners (all with reasonable default values).  
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 A partial list of Fractal types and their formulas included in this release ("partial" only because I haven't yet gotten off my duff and updated this lis}{\f2 t to include the new fractal types added in version 18.x - sorry about that):

\par }\pard {\f2 
\par }\pard {\b\f2 barnsleyj1
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = (z-1)*c if real(z) >= 0, else
\par }{\f2       z(n+1) = (z+1)*modulus(c)/c
\par }{\f2     Two parameters: real and imaginary parts of c
\par }{\f2 
\par }\pard {\b\f2 barnsleyj2
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       if real(z(n)) * imag(c) + real(c) * imag(z((n)) >= 0
\par }{\f2 \tab  z(n+1) = (z(n)-1)*c
\par }{\f2       else
\par }{\f2 \tab  z(n+1) = (z(n)+1)*c
\par }{\f2     Two parameters: real and imaginary parts of c
\par }{\f2 
\par }\pard {\b\f2 barnsleyj3}{\f2 
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       if real(z(n) > 0 then}{\f2  z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1)
\par }{\f2 \tab  + i * (2*real(z((n)) * imag(z((n))) else
\par }{\f2       z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1 + real(c) * real(z(n))
\par }{\f2 \tab      + i * (2*real(z((n)) * imag(z((n)) + imag(c) * real(z(n))
\par }{\f2     Two parameters: real and imaginary parts of c.
\par }{\f2 
\par }\pard {\b\f2 barnsleym1}{\f2 
\par }\pard {\f2       z(0) = c = pixel;
\par }{\f2       if real(z) >= 0 then
\par }{\f2 \tab z(n+1) = (z-1)*c
\par }{\f2       else
\par }{\f2 \tab z(n+1) = (z+1)*modulus(c)/c.
\par }{\f2     Parameters are perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 barnsleym2}{\f2 
\par }\pard {\f2       z(0) = c = pixel;
\par }{\f2       if real(z)*imag(c)}{\f2  + real(c)*imag(z) >= 0
\par }{\f2 \tab z(n+1) = (z-1)*c
\par }{\f2       else
\par }{\f2 \tab z(n+1) = (z+1)*c
\par }{\f2     Parameters are perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 barnsleym3
\par }\pard {\f2       z(0) = c = pixel;
\par }{\f2       if real(z(n) > 0 then z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1)
\par }{\f2 \tab  + i * (2*real(z((n)) * imag(z((n))) else
\par }{\f2       z(n+1) = (real(z(n))^2 - imag(z(n))^2 - 1 + real(c) * real(z(n))
\par }{\f2 \tab  + i * (2*real(z((n)) * imag(z((n)) + imag(c) * real(z(n))
\par }{\f2     Parameters are pertubations of z(0)
\par }{\f2 
\par }\pard {\b\f2 bifurcation}{\f2 
\par }\pard {\f2     Pictoral representation of a population growth }{\f2 model.
\par }{\f2       Let P = new population, p = oldpopulation, r = growth rate
\par }{\f2       The model is: P = p +  r*p*(1-p).
\par }{\f2     Two parameters: Filter Cycles and Seed Population.
\par }{\f2 
\par }\pard {\b\f2 bif+sinpi
\par }\pard {\f2     Bifurcation variation: model is: P = p + r*sin(PI*p).
\par }{\f2     Two parameters: Filter Cycles and Seed Population.
\par }{\f2 
\par }\pard {\b\f2 bif=sinpi
\par }\pard {\f2     Bifurcation variation: model is: P = r*sin(PI*p).
\par }{\f2     Two parameters: Filter Cycles and Seed Population.
\par }{\f2 
\par }\pard {\b\f2 biflambda
\par }\pard {\f2     Bifurcation variation: model is: P = r*p*(1-p)P.
\par }{\f2     Two parameters: Fi}{\f2 lter Cycles and Seed Population.
\par }{\f2 
\par }\pard {\b\f2 bifstewart
\par }\pard {\f2     Bifurcation variation: model is: P = (r*p*p) - 1.
\par }{\f2     Two parameters: Filter Cycles and Seed Population.
\par }{\f2 
\par }\pard {\b\f2 Circle
\par }\pard {\f2     Circle pattern by John Connett
\par }{\f2       x + iy = pixel
\par }{\f2       z = a*(x^2 + y^2)
\par }{\f2       c = integer part of z
\par }{\f2       color = c modulo(number of colors)
\par }{\f2 
\par }\pard {\b\f2 cmplxmarksjul
\par }\pard {\f2     A generalization of the marksjulia fractal.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = (c^exp)*z(n) + c.
\par }{\f2     Four parameters: real and imaginary parts of c and exp.
\par }{\f2 
\par }\pard {\b\f2 cmplx}{\b\f2 marksmand
\par }\pard {\f2     A generalization of the marksmandel fractal.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = (c^exp)*z(n) + c.
\par }{\f2     Four parameters: real and imaginary parts of
\par }{\f2     perturbation of z(0) and exp.
\par }{\f2 
\par }\pard {\b\f2 complexnewton, complexbasin
\par }\pard {\f2     Newton fractal types extended to complex degrees. Complexnewton
\par }{\f2     colors pixels according to the number of iterations required to
\par }{\f2     escape to a root. Complexbasin colors pixels according to which
\par }{\f2     root captures the orbit. The equation is based on the newton
\par }{\f2    }{\f2  formula for solving the equation z^p = r
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = ((p - 1) * z(n)^p + r)/(p * z(n)^(p - 1)).
\par }{\f2     Four parameters: real & imaginary parts of degree p and root r
\par }{\f2 
\par }\pard {\b\f2 diffusion
\par }\pard {\f2     Diffusion Limited Aggregation.  Randomly moving points
\par }{\f2     accumulate.  One parameter: border width (default 10)
\par }{\f2 
\par }\pard {\b\f2 fn+fn(pix)
\par }\pard {\f2       c = z(0) = pixel;
\par }{\f2       z(n+1) = fn1(z) + p*fn2(c)
\par }{\f2     Six parameters: real and imaginary parts of the perturbation
\par }{\f2     of z(0) and factor p, and the functions fn1, a}{\f2 nd fn2.
\par }{\f2 
\par }\pard {\b\f2 fn(z*z)
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = fn(z(n)*z(n))
\par }{\f2     One parameter: the function fn.
\par }{\f2 
\par }\pard {\b\f2 fn*fn
\par }\pard {\f2       z(0) = pixel; z(n+1) = fn1(n)*fn2(n)
\par }{\f2     Two parameters: the functions fn1 and fn2.
\par }{\f2 
\par }\pard {\b\f2 fn*z+z
\par }\pard {\f2       z(0) = pixel; z(n+1) = p1*fn(z(n))*z(n) + p2*z(n)
\par }{\f2     Six parameters: the real and imaginary components of
\par }{\f2     p1 and p2, and the functions fn1 and fn2.
\par }{\f2 
\par }\pard {\b\f2 fn+fn
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = p1*fn1(z(n))+p2*fn2(z(n))
\par }{\f2     Six parameters: The real and imaginary components of
\par }{\f2  }{\f2    p1 and p2, and the functions fn1 and fn2.
\par }{\f2 
\par }\pard {\b\f2 formula
\par }\pard {\f2     Formula interpreter - write your own formulas as text files!
\par }{\f2 
\par }\pard {\b\f2 gingerbread
\par }\pard {\f2     Orbit in two dimensions defined by:
\par }{\f2       x(n+1) = 1 - y(n) + |x(n)|
\par }{\f2       y(n+1) = x(n)
\par }{\f2     Two parameters: initial values of x(0) and y(0).
\par }{\f2 
\par }\pard {\b\f2 henon
\par }\pard {\f2     Orbit in two dimensions defined by:
\par }{\f2       x(n+1) = 1 + y(n) - a*x(n)*x(n)
\par }{\f2       y(n+1) = b*x(n)
\par }{\f2     Two parameters: a and b
\par }{\f2 
\par }\pard {\b\f2 Hopalong
\par }\pard {\f2     Hopalong attractor by Barry Martin - orbit in two dimensions.
\par }{\f2     }{\f2   z(0) = y(0) = 0;
\par }{\f2       x(n+1) = y(n) - sign(x(n))*sqrt(abs(b*x(n)-c))
\par }{\f2       y(n+1) = a - x(n)
\par }{\f2     Parameters are a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 IFS
\par }\pard {\f2     Barnsley IFS fractals.
\par }{\f2 
\par }\pard {\b\f2 julfn+exp
\par }\pard {\f2     A generalized Clifford Pickover fractal.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = fn(z(n)) + e^z(n) + c.
\par }{\f2     Three parameters: real & imaginary parts of c, and fn
\par }{\f2 
\par }\pard {\b\f2 julfn+zsqrd
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = fn(z(n)) + z(n)^2 + c
\par }{\f2     Three parameters: real & imaginary parts of c, and fn
\par }{\f2 
\par }\pard {\b\f2 julia
\par }\pard {\f2     Classic Julia set fra}{\f2 ctal.
\par }{\f2       z(0) = pixel; z(n+1) = z(n)^2 + c.
\par }{\f2     Two parameters: real and imaginary parts of c.
\par }{\f2 
\par }\pard {\b\f2 julia4
\par }\pard {\f2     Fourth-power Julia set fractals, a special case
\par }{\f2     of julzpower kept for speed.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = z(n)^4 + c.
\par }{\f2     Two parameters: real and imaginary parts of c.
\par }{\f2 
\par }\pard {\b\f2 julibrot
\par }\pard {\f2     'Julibrot' 4-dimensional fractals.
\par }{\f2 
\par }\pard {\b\f2 julzpower
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = z(n)^m + c.
\par }{\f2     Three parameters: real & imaginary parts of c, exponent m
\par }{\f2 
\par }\pard {\b\f2 julzzpwr
\par }\pard {\f2       z(0) = pixel;
\par }{\f2    }{\f2    z(n+1) = z(n)^z(n) + z(n)^m + c.
\par }{\f2     Three parameters: real & imaginary parts of c, exponent m
\par }{\f2 
\par }\pard {\b\f2 kamtorus, kamtorus3d
\par }\pard {\f2     Series of orbits superimposed.
\par }{\f2     3d version has 'orbit' the z dimension.
\par }{\f2       x(0) = y(0) = orbit/3;
\par }{\f2       x(n+1) = x(n)*cos(a) + (x(n)*x(n)-y(n))*sin(a)
\par }{\f2       y(n+1) = x(n)*sin(a) - (x(n)*x(n)-y(n))*cos(a)
\par }{\f2     After each orbit, 'orbit' is incremented by a step size.
\par }{\f2     Parameters: a, step size, stop value for 'orbit', and
\par }{\f2     points per orbit.
\par }{\f2 
\par }\pard {\b\f2 lambda
\par }\pard {\f2     Classic Lam}{\f2 bda fractal. 'Julia' variant of Mandellambda.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = lambda*z(n)*(1 - z(n)^2).
\par }{\f2     Two parameters: real and imaginary parts of lambda.
\par }{\f2 
\par }\pard {\b\f2 lambdafn
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = lambda * fn(z(n)).
\par }{\f2     Three parameters: real, imag portions of lambda, and fn
\par }{\f2 
\par }\pard {\b\f2 lorenz, lorenz3d
\par }\pard {\f2     Lorenz two lobe attractor - orbit in three dimensions.
\par }{\f2     In 2d the x and y components are projected to form the image.
\par }{\f2       z(0) = y(0) = z(0) = 1;
\par }{\f2       x(n+1) = x(n) + (-a*x(n)*dt) + (}{\f2 \tab  a*y(n)*dt)
\par }{\f2       y(n+1) = y(n) + ( b*x(n)*dt) - (\tab    y(n)*dt) - (z(n)*x(n)*dt)
\par }{\f2       z(n+1) = z(n) + (-c*z(n)*dt) + (x(n)*y(n)*dt)
\par }{\f2     Parameters are dt, a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 lorenz3d1
\par }\pard {\f2     Lorenz one lobe attractor - orbit in three dimensions.
\par }{\f2     The original formulas were developed by Rick Miranda and Emily Stone.
\par }{\f2       z(0) = y(0) = z(0) = 1; norm = sqrt(x(n)^2 + y(n)^2)
\par }{\f2       x(n+1) = x(n) + (-a*dt-dt)*x(n) + (a*dt-b*dt)*y(n) 
\par }{\f2          + (dt-a*dt)*norm + y(n)*dt*z(n)
\par }{\f2       y(n+1) = y(n) + (b*dt-a*}{\f2 dt)*x(n) - (a*dt+dt)*y(n) 
\par }{\f2          + (b*dt+a*dt)*norm - x(n)*dt*z(n) - norm*z(n)*dt
\par }{\f2       z(n+1) = z(n) +(y(n)*dt/2) - c*dt*z(n)
\par }{\f2     Parameters are dt, a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 lorenz3d3
\par }\pard {\f2     Lorenz three lobe attractor - orbit in three dimensions.
\par }{\f2     The original formulas were developed by Rick Miranda and Emily Stone.
\par }{\f2       z(0) = y(0) = z(0) = 1; norm = sqrt(x(n)^2 + y(n)^2)
\par }{\f2       x(n+1) = x(n) +(-(a*dt+dt)*x(n) + (a*dt-b*dt+z(n)*dt)*y(n))/3 
\par }{\f2           + ((dt-a*dt)*(x(n)^2-y(n)^2) 
\par }{\f2           + 2*(b*dt+a}{\f2 *dt-z(n)*dt)*x(n)*y(n))/(3*norm)
\par }{\f2       y(n+1) = y(n) +((b*dt-a*dt-z(n)*dt)*x(n) - (a*dt+dt)*y(n))/3 
\par }{\f2           + (2*(a*dt-dt)*x(n)*y(n) 
\par }{\f2           + (b*dt+a*dt-z(n)*dt)*(x(n)^2-y(n)^2))/(3*norm)
\par }{\f2       z(n+1) = z(n) +(3*x(n)*dt*x(n)*y(n)-y(n)*dt*y(n)^2)/2 - c*dt*z(n)
\par }{\f2     Parameters are dt, a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 lorenz3d4
\par }\pard {\f2     Lorenz four lobe attractor - orbit in three dimensions.
\par }{\f2     The original formulas were developed by Rick Miranda and Emily Stone.
\par }{\f2       z(0) = y(0) = z(0) = 1; 
\par }{\f2       x(n+1) = x(n) +(}{\f2 -a*dt*x(n)^3 
\par }{\f2          + (2*a*dt+b*dt-z(n)*dt)*x(n)^2*y(n) + (a*dt-2*dt)*x(n)*y(n)^2 
\par }{\f2          + (z(n)*dt-b*dt)*y(n)^3) / (2 * (x(n)^2+y(n)^2))
\par }{\f2       y(n+1) = y(n) +((b*dt-z(n)*dt)*x(n)^3 + (a*dt-2*dt)*x(n)^2*y(n) 
\par }{\f2          + (-2*a*dt-b*dt+z(n)*dt)*x(n)*y(n)^2 
\par }{\f2          - a*dt*y(n)^3) / (2 * (x(n)^2+y(n)^2))
\par }{\f2       z(n+1) = z(n) +(2*x(n)*dt*x(n)^2*y(n) - 2*x(n)*dt*y(n)^3 - c*dt*z(n))
\par }{\f2     Parameters are dt, a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 lsystem
\par }\pard {\f2     Using a turtle-graphics control language and starting with
\par }{\f2     an }{\f2 initial axiom string, carries out string substitutions the
\par }{\f2     specified number of times (the order), and plots the resulting.
\par }{\f2 
\par }\pard {\b\f2 lyapunov
\par }\pard {\f2     Derived from the Bifurcation fractal, the Lyapunov plots the Lyapunov
\par }{\f2     Exponent for a population model where the Growth parameter varies between
\par }{\f2     two values in a periodic manner.
\par }{\f2 
\par }\pard {\b\f2 magnet1j
\par }\pard {\f2       z(0) = pixel;
\par }{\f2 \tab        / z(n)^2 + (c-1) \\
\par }{\f2       z(n+1) = | --------------------- | ^ 2
\par }{\f2 \tab        \\ 2*z(n) + (c-2)  /
\par }{\f2     Parameters: the real and imaginary part}{\f2 s of c
\par }{\f2 
\par }\pard {\b\f2 magnet1m
\par }\pard {\f2       z(0) = 0; c = pixel;
\par }{\f2 \tab        / z(n)^2 + (c-1)  \\
\par }{\f2       z(n+1) = | --------------------- | ^ 2
\par }{\f2 \tab       \\ 2*z(n) + (c-2)   /
\par }{\f2     Parameters: the real & imaginary parts of perturbation of z(0)
\par }{\f2 
\par }\pard {\b\f2 magnet2j
\par }\pard {\f2       z(0) = pixel;
\par }{\f2 \tab        / z(n)^3 + 3*(C-1)*z(n) + (C-1)*(C-2)              \\
\par }{\f2       z(n+1) = |  ---------------------------------------------------------- | ^ 2
\par }{\f2 \tab        \\ 3*(z(n)^2) + 3*(C-2)*z(n) + (C-1)*(C-2) - 1 /
\par }{\f2     Parameters: the real and imaginary parts of c
\par }{\f2 
\par }\pard {\b\f2 mag}{\b\f2 net2m
\par }\pard {\f2       z(0) = 0; c = pixel;
\par }{\f2 \tab       / z(n)^3 + 3*(C-1)*z(n) + (C-1)*(C-2)              \\
\par }{\f2       z(n+1) = |  --------------------------------------------------------- | ^ 2
\par }{\f2 \tab       \\ 3*(z(n)^2) + 3*(C-2)*z(n) + (C-1)*(C-2) - 1 /
\par }{\f2     Parameters: the real and imaginary parts of perturbation of z(0)
\par }{\f2 
\par }\pard {\b\f2 mandel
\par }\pard {\f2     Classic Mandelbrot set fractal.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = z(n)^2 + c.
\par }{\f2     Two parameters: real & imaginary perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 mandel4
\par }\pard {\f2     Special case of mandelzpower kep}{\f2 t for speed.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = z(n)^4 + c.
\par }{\f2     Parameters: real & imaginary perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 mandelfn
\par }\pard {\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = c*fn(z(n)).
\par }{\f2     Parameters: real & imaginary perturbations of z(0), and fn
\par }{\f2 
\par }\pard {\b\f2 Martin
\par }\pard {\f2     Attractor fractal by Barry Martin - orbit in two dimensions.
\par }{\f2       z(0) = y(0) = 0;
\par }{\f2       x(n+1) = y(n) - sin(x(n))
\par }{\f2       y(n+1) = a - x(n)
\par }{\f2     Parameter is a (try a value near pi)
\par }{\f2 
\par }\pard {\b\f2 mandellambda
\par }\pard {\f2       z(0) = .5; lambda = pixel;
\par }{\f2       z(n+}{\f2 1) = lambda*z(n)*(1 - z(n)^2).
\par }{\f2     Parameters: real & imaginary perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 manfn+exp
\par }\pard {\f2     'Mandelbrot-Equivalent' for the julfn+exp fractal.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = fn(z(n)) + e^z(n) + C.
\par }{\f2     Parameters: real & imaginary perturbations of z(0), and fn
\par }{\f2 
\par }\pard {\b\f2 manfn+zsqrd
\par }\pard {\f2     'Mandelbrot-Equivalent' for the Julfn+zsqrd fractal.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = fn(z(n)) + z(n)^2 + c.
\par }{\f2     Parameters: real & imaginary perturbations of z(0), and fn
\par }{\f2 
\par }\pard {\b\f2 manowar
\par }\pard {\f2       c = z1(0)}{\f2  = z(0) = pixel;
\par }{\f2       z(n+1) = z(n)^2 + z1(n) + c;
\par }{\f2       z1(n+1) = z(n);
\par }{\f2     Parameters: real & imaginary perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 manowarj
\par }\pard {\f2       z1(0) = z(0) = pixel;
\par }{\f2       z(n+1) = z(n)^2 + z1(n) + c;
\par }{\f2       z1(n+1) = z(n);
\par }{\f2     Parameters: real & imaginary perturbations of z(0)
\par }{\f2 
\par }\pard {\b\f2 manzpower
\par }\pard {\f2     'Mandelbrot-Equivalent' for julzpower.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = z(n)^exp + c; try exp = e = 2.71828...
\par }{\f2     Parameters: real & imaginary perturbations of z(0), real &
\par }{\f2     imaginary parts of}{\f2  exponent exp.
\par }{\f2 
\par }\pard {\b\f2 manzzpwr
\par }\pard {\f2     'Mandelbrot-Equivalent' for the julzzpwr fractal.
\par }{\f2       z(0) = c = pixel
\par }{\f2       z(n+1) = z(n)^z(n) + z(n)^exp + C.
\par }{\f2     Parameters: real & imaginary perturbations of z(0), and exponent
\par }{\f2 
\par }\pard {\b\f2 marksjulia
\par }\pard {\f2     A variant of the julia-lambda fractal.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = (c^exp)*z(n) + c.
\par }{\f2     Parameters: real & imaginary parts of c, and exponent
\par }{\f2 
\par }\pard {\b\f2 marksmandel
\par }\pard {\b\f2  }{\f2    A variant of the mandel-lambda fractal.
\par }{\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = (c^exp)*z(n) + c.
\par }{\f2   }{\f2   Parameters: real & imaginary perturbations of z(0), and exponent
\par }{\f2 
\par }\pard {\b\f2 marksmandelpwr
\par }\pard {\f2     The marksmandelpwr formula type generalized (it previously
\par }{\f2     had fn=sqr hard coded).
\par }{\f2       z(0) = pixel, c = z(0) ^ (z(0) - 1):
\par }{\f2       z(n+1) = c * fn(z(n)) + pixel,
\par }{\f2     Parameters: real and imaginary pertubations of z(0), and fn
\par }{\f2 
\par }\pard {\b\f2 newtbasin
\par }\pard {\f2     Based on the Newton formula for finding the roots of z^p - 1.
\par }{\f2     Pixels are colored according to which root captures the orbit.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = ((}{\f2 p-1)*z(n)^p + 1)/(p*z(n)^(p - 1)).
\par }{\f2     Two parameters: the polynomial degree p, and a flag to turn
\par }{\f2     on color stripes to show alternate iterations.
\par }{\f2 
\par }\pard {\b\f2 newton
\par }\pard {\f2     Based on the Newton formula for finding the roots of z^p - 1.
\par }{\f2     Pixels are colored according to the iteration when the orbit
\par }{\f2     is captured by a root.
\par }{\f2       z(0) = pixel;
\par }{\f2       z(n+1) = ((p-1)*z(n)^p + 1)/(p*z(n)^(p - 1)).
\par }{\f2     One parameter: the polynomial degree p.
\par }{\f2 
\par }\pard {\b\f2 pickover
\par }\pard {\f2     Orbit in three dimensions defined by:
\par }{\f2       x(n+1) =}{\f2  sin(a*y(n)) - z(n)*cos(b*x(n))
\par }{\f2       y(n+1) = z(n)*sin(c*x(n)) - cos(d*y(n))
\par }{\f2       z(n+1) = sin(x(n))
\par }{\f2     Parameters: a, b, c, and d.
\par }{\f2 
\par }\pard {\b\f2 plasma
\par }\pard {\f2     Random, cloud-like formations.  Requires 4 or more colors.
\par }{\f2     A recursive algorithm repeatedly subdivides the screen and
\par }{\f2     colors pixels according to an average of surrounding pixels
\par }{\f2     and a random color, less random as the grid size decreases.
\par }{\f2     Three parameters: 'graininess' (.5 to 50, default = 2), old/new
\par }{\f2     algorithm, seed value used.
\par }{\f2 
\par }\pard {\b\f2 p}{\b\f2 opcorn
\par }\pard {\f2     The orbits in two dimensions defined by:
\par }{\f2       x(0) = xpixel, y(0) = ypixel;
\par }{\f2       x(n+1) = x(n) - h*sin(y(n) + tan(3*y(n))
\par }{\f2       y(n+1) = y(n) - h*sin(x(n) + tan(3*x(n))
\par }{\f2     are plotted for each screen pixel and superimposed.
\par }{\f2     One parameter: step size h.
\par }{\f2 
\par }\pard {\b\f2 popcornjul
\par }\pard {\f2     Conventional Julia using the popcorn formula:
\par }{\f2       x(0) = xpixel, y(0) = ypixel;
\par }{\f2       x(n+1) = x(n) - h*sin(y(n) + tan(3*y(n))
\par }{\f2       y(n+1) = y(n) - h*sin(x(n) + tan(3*x(n))
\par }{\f2     One parameter: step size h.
\par }{\f2 
\par }\pard {\b\f2 ro}{\b\f2 ssler3D
\par }\pard {\f2     Orbit in three dimensions defined by:
\par }{\f2       x(0) = y(0) = z(0) = 1;
\par }{\f2       x(n+1) = x(n) - y(n)*dt -   z(n)*dt
\par }{\f2       y(n+1) = y(n) + x(n)*dt + a*y(n)*dt
\par }{\f2       z(n+1) = z(n) + b*dt + x(n)*z(n)*dt - c*z(n)*dt
\par }{\f2     Parameters are dt, a, b, and c.
\par }{\f2 
\par }\pard {\b\f2 sierpinski
\par }\pard {\f2     Sierpinski gasket - Julia set producing a 'Swiss cheese triangle'
\par }{\f2       z(n+1) = (2*x,2*y-1) if y > .5;
\par }{\f2 \tab   else (2*x-1,2*y) if x > .5;
\par }{\f2 \tab   else (2*x,2*y)
\par }{\f2     No parameters.
\par }{\f2 
\par }\pard {\b\f2 spider
\par }\pard {\f2       c(0) = z(0) = pixel;
\par }{\f2       z(n+1) = z(n}{\f2 )^2 + c(n);
\par }{\f2       c(n+1) = c(n)/2 + z(n+1)
\par }{\f2     Parameters: real & imaginary perturbation of z(0)
\par }{\f2 
\par }\pard {\b\f2 sqr(1/fn)
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = (1/fn(z(n))^2
\par }{\f2     One parameter: the function fn.
\par }{\f2 
\par }\pard {\b\f2 sqr(fn)
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       z(n+1) = fn(z(n))^2
\par }{\f2     One parameter: the function fn.
\par }{\f2 
\par }\pard {\b\f2 test
\par }\pard {\f2     'test' point letting us (and you!) easily add fractal types via
\par }{\f2     the c module testpt.c.  Default set up is a mandelbrot fractal.
\par }{\f2     Four parameters: user hooks (not used by default testpt.c).
\par }{\f2 
\par }\pard {\b\f2 te}{\b\f2 trate
\par }\pard {\f2       z(0) = c = pixel;
\par }{\f2       z(n+1) = c^z(n)
\par }{\f2     Parameters: real & imaginary perturbation of z(0)
\par }{\f2 
\par }\pard {\b\f2 tim's_error
\par }\pard {\f2     A serendipitous coding error in marksmandelpwr brings to life
\par }{\f2     an ancient pterodactyl!  (Try setting fn to sqr.)
\par }{\f2       z(0) = pixel, c = z(0) ^ (z(0) - 1):
\par }{\f2       tmp = fn(z(n))
\par }{\f2       real(tmp) = real(tmp) * real(c) - imag(tmp) * imag(c);
\par }{\f2       imag(tmp) = real(tmp) * imag(c) - imag(tmp) * real(c);
\par }{\f2       z(n+1) = tmp + pixel;
\par }{\f2     Parameters: real & imaginary pertubations }{\f2 of z(0) and function fn
\par }{\f2 
\par }\pard {\b\f2 unity
\par }\pard {\f2       z(0) = pixel;
\par }{\f2       x = real(z(n)), y = imag(z(n))
\par }{\f2       One = x^2 + y^2;
\par }{\f2       y = (2 - One) * x;
\par }{\f2       x = (2 - One) * y;
\par }{\f2       z(n+1) = x + i*y
\par }\pard \sl240 {\f2     No parameters.
\par }{\f2 
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # zoom_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Zooming in on an image}}}{\f2 +{\footnote \pard\plain \fs20\lang1033 {\f3 + browse:040}}}{\f2 K{\footnote 
\pard\plain \fs20\lang1033 {\f3 K zooming;zoom in; zoom out; zoom bar}}}{\f2 
\par }\pard \sl240 {\b\f2 Zooming in on an Image}{\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 
There are two different methods of generating and using "Zoom-Boxes".  Which method you use depends on which of the "Zoom Box" checkboxes you have selected using the "Views" menuitem.  If you've never selected any of these checkboxes, the "Zoom In" option
}{\f2  is in ef}{\f2 fect.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 If you have the "Zoom In Box" or "Zoom Out Box" options enabled, Winfract's zoom box is activated in the following fashion:
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 
With the "Zoom In Box" option activated, move your mouse pointer to the center of the area you wish to zoom in on.  Press and hold down the left mouse button as you move the mouse away from that center point.  A "Zoom Box" will be displayed, changing in s
}{\f2 ize as you move the mouse.  When you have the zoom box the size you want, let go of the left mouse button.
\par }\pard \sl240 {\f2 If you want t}{\f2 
o adjust the location of the zoom box at this point, move your mouse pointer inside the zoom box, press and hold down the left mouse button again, and move the mouse.  The zoom box follows the mouse pointer until you let go of the left mouse button.

\par }\pard \sl240 {\f2 
To activate the zoom, double-click the left mouse button with the mouse pointer inside the zoom box.  To disable the zoom box instead (say, you changed your mind, or the box isn't really the right size), double-click on the left mouse button with the mous
}{\f2 e poin}{\f2 ter positioned somewhere outside of the zoom box (pressing the ESCAPE key gets rid of the zoom box, too).
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 "Zoom Out" works just like "Zoom In", except that you will be zooming out - the zoom box is actually showing you where on the new image your current image will display.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 If you have enabled the "Zoom-Box" option, a vertical Zoom-Box scroll-bar is displayed in addition to your fractal image.  The Zoom-Box defaults to the mid-position, in which your Zoom-Box exactly covers the area of your fractal im}{
\f2 
age.  Moving the scroll-button up shrinks your zoom-box (and makes it visible on the fractal image).  You can them move the zoom-box around by moving your cursor inside the zoom-box and then holding down your left mouse-button and moving the cursor and zo
}{\f2 om-box as a single unit.  Double-clicking the left mouse button will cause your image to be redrawn using your current zoom-box coordinates.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 You can also "Zoom Out" by moving the zoom-box scroll bar below the midpoint.  When you do this, the zoom-box tha}{\f2 
t is displayed is actually showing you where (and how small) your currently displayed image would be if you double-clicked the left mouse button at that point.  Moving the zoom-box and double-clicking to perform the zoom is done the same way as when you a
}{\f2 re "zooming in".
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 \page }{\fs16\up6 #{\footnote \pard\plain \fs20\lang1033 {\f3\up6 #}{\f3  julia_index}}}{\fs16\up6 ${\footnote \pard\plain \fs20\lang1033 {\f3\up6 $}{\f3  Mandelbrot/Julia Toggling}}}{\fs16\up6 +{\footnote \pard\plain \fs20\lang1033 {
\f3\up6 +}{\f3  browse:043}}}{\fs16\up6 K{\footnote \pard\plain \fs20\lang1033 {\f3 K Mandelbrot/Julia toggling}}}{\f2  
\par }\pard \sl240 {\b\f2 Mandelbrot/Julia Toggling
\par }{\f2 
\par }\pard \sl240 {\f2 You can switch from a "Mandelbrot Set" image to its "Julia Set" at the location of the mouse cursor by clicking on the right mouse button.  When the corresponding "Julia Set" image is on the screen, c}{\f2 
lick the right mouse button again to get the "Mandelbrot Set" image back.  The terms "Mandelbrot Set" and "Julia Set" are in quotes because many fractal types (mandel4 and julia4, for instance) have this "Mandelbrot Set"/"Julia Set" relationship.   

\par }\pard \sl240 {\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \fs20\lang1033 {\f3 # cycling_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Color Cycling}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + bro}{\f3 wse:045}}}{\f2 K{\footnote 
\pard\plain \sl240 \fs20\lang1033 {\f3 K cycling}}}{\f2 
\par }\pard \sl240 {\b\f2 Color Cycling}{\f2  
\par }{\f2 
\par }\pard \sl240 {\f2 You start and stop Color-cycling mode using the Color-Cycling menu.  This menu also lets you determine the direction of the cycling (the designations "in" and "out" were arbitrarily picked based on how the effect looked on a single }{
\f2 Mandelbrot image), whether to just rotate the existing colors or generate new ones randomly, and (for random color-generation) whether the colors are to change with a low, medium, or high frequency. 
\par }\pard \sl240 {\f2 
\par }{\f2 You can also use  the following "}{\b\f2 Hot-keys}{\f2 " for color-cycling 
\par }{\f2   spacebar - toggles color-cycling on and off 
\par }{\f2   '<', '>' - shifts the palette "in" or "out" one color
\par }{\f2   left, right arrows - turn on color-cycling and set the "direction" 
\par }{\f2   up, down arrows - speed up or slow down the color-cycling speed
\par }{\f2   E}{\f2 NTER - initiate random color-cycling with all new colors 
\par }\pard \sl240 {\f2   (Note that Windows takes a second or so to "fire up" color-cycling,   so be patient when you press one of these keys.) 
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 
Sorry, but at the current time color-cycling is restricted to display devices whose Windows drivers are capable of palette manipulation - and the "stock" VGA driver distributed with Win 3.x doesn't have it!  In fact, at the moment the only Windows video d
}{\f2 rivers we've ever seen capable of palette manipulation have been 256-colo}{\f2 
r drivers.   If Winfract ever does find itself running with a palette-based 16-color video driver (it's theoretically possible), it will color-cycle only when its window has the input focus (temporarily converting the remainder of your Windows screen to b
}{\f2 lack-and-white), and return to the "stock" palette values when it loses this focus.   
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # distrib_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Distribution Policy}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:065}}}{\f2 K
{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 K distribution policy;freeware;copyright;contacting authors}}}{\f2 
\par }\pard \sl240 {\f2 {\*\bkmkstart DDE_LINK2}{\*\bkmkstart DDE_LINK1}
\par }{\b\f2 Distribution Policy, Contacting the Authors, The Book }{\f2 
\par }{\f2  
\par }\pard \sl240 {\f2 The Stone Soup Group is a loosely associated group of fanatic programmers.   Winfract (Fractint for}{\f2  Windows) like Fractint for DOS, is copyrighted freeware. Our motto is simple: }{\b\f2 Don't want money. Got money. Want admiration
}{\f2 
.  This means we encourage prolific use and distribution of Winfract not for money, but for the pleasure of knowing you enjoy it.  So play with it, change it, learn from the source code, put the fractals in your artwork, whatever.  But don't sell it or bu
}{\f2 ndle it with your commercial product without permission.  That is illegal. 
\par }\pard \sl240 {\f2 
\par }{\b\f2 Conditions on use}{\f2 : 
\par }{\f2 
\par }\pard {\b\f2 Winfract (Fractint for Windows) }{\b\f2 like Fractint for DOS, is copyrighted freeware.  As such, it may be freely copied and distributed but may not be sold.}{\f2 
  Winfract may be distributed by shareware and freeware distributors and a nominal distribution fee may be charged for media and handling.  Winfract may also be distributed on networks and BBSs.  Winfract may be used personally or in a business - if you c
}{\f2 an do your job better by using Winfract, or using images from it, that's great!  Winfract may not be given away with commercial products wi}{\f2 thout explicit permission from the Stone Soup Group.
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 There is no warranty of Winfract's suitability for any purpose, nor any acceptance of liability, express or implied.   
\par }\pard \sl240 {\f2 
\par }{\b\f2 Contacting the Authors}{\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 Virtually all of the Fractint and Winfract authors can be found on the }{\b\f2 CompuServe}{\f2  network in the }{\b\f2 GRAPHDEV }{\f2 
("Graphics Development") forum in Section 4 ("Fractal Sources").  Fractint and Winfract development occurs in the GRAPHDEV forum - most of the authors have never met except there.  New members are alwa}{\f2 ys welcome!
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 You can also send letters to us in care of Waite Group Press, 200 Tamal Plaza, Corte Madera, Ca  94925.
\par }\pard \sl240 {\f2 
\par }{\b\f2 The Book}{\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 Version  17.5 of Winfract was licensed to Waite Group Press for use in our book, }{\b\f2 Fractals for Windows}{\f2 
.  The book is available at all fine boostores, book chains, and Superstores.  Ask for Fractals for Windows by Wegner, et al, ISBN 1-878739-25-5, $34.95, published by Waite Group Press.  You can order directly from Waite Group Press by calling 1-800-368-9
}{\f2 369 in the USA and 415}{\f2 -924-2575 in California or outside the USA.  Although the book describes a slightly older version of Winfract than this one, it's still an excellent source of information on fractals in general and Winfract in particular.

\par }\pard \sl240 {\f2 {\*\bkmkend DDE_LINK2}{\*\bkmkend DDE_LINK1}
\par }{\b\f2 Program Updates}{\f2 
\par }{\f2 
\par }\pard {\f2 New versions of Winfract and Fractint are uploaded to the CompuServe network, and make their way to other systems from that point.  The latest version of Winfract can be found in the "Fractal Sources" library of GRAPHDEV as }{\b\f2 WINFRA.ZIP}
{\f2  (Executable/Docs) and }{\b\f2 WINSRC.ZIP}{\f2  }{\f2 
(Complete Source).  If you're not a CompuServe subscriber, but wish to get more information about CompuServe and its graphics forums, feel free to call their 800 number (800-848-8199) and ask for operator number 229.
\par }\pard {\f2 
\par }\pard {\f2 If you don't have access to CompuServe, many other sites tend to carry these files shortly after their initial release (although sometimes using different naming conventions).  In particular...
\par }\pard {\f2 
\par }\pard {\f2 If you speak Internet and FTP, SIMTEL20 and its various mirror sites tend to carry new versions}{\f2 
 of Winfract and Fractint shortly after they are released.  Look in the PD:<MSDOS.GRAPHICS> and PD:<MSDOS.WINDOWS3> directories for these files .
\par }\pard {\f2 
\par }\pard {\f2 
Your favorite local BBS may carry these files as well (although perhaps not the latest versions) using naming conventions like WINFRA*.ZIP and FRAINT*.ZIP.  One BBS that *does* carry the latest version is the "Ideal Studies BBS" (508)757-1806, 1200/2400/9
}{\f2 600HST.  Peter Longo is the SYSOP and a true fractal fanatic.  There is a very short registration, and there}{\f2 after the entire board is open to callers on the first call.
\par }\pard {\f2 
\par }\pard {\f2 
Many Shareware/Freeware library services will ship you diskettes containing the latest versions of Fractint for a nominal fee that basically covers their cost of packaging and a small profit that we don't mind them making. One in particular is the Public 
}{\f2 (Software) Library, PO Box 35705, Houston, TX 77235-5705, USA.  Their phone number is 800-242-4775 (outside the US, dial 713-524-6398).  Ask for item #9112 for five 5.25" disks, #9113 for three}{\f2 
 3.5" disks.  Cost is $6.99 plus $4 S&H in the U.S./Canada, $11 S&H overseas.
\par }\pard {\f2 \tab \tab   ...
\par }\pard \sl240 {\f2 \page #{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 # authors_index}}}{\f2 ${\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 $ Who wrote this program?}}}{\f2 +{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 + browse:070}}}{\f2 K
{\footnote \pard\plain \sl240 \fs20\lang1033 {\f3 K authors}}}{\f2 
\par }\pard \sl240 {\b\f2 A list of Winfract and Fractint Authors }{\f2 
\par }{\f2 
\par }\pard \sl240 {\f2 
Winfract (Fractint for Windows) was originally ported from Fractint-for-DOS by Bert Tyler.  This is the first Windows program that Bert ever wrote,which goes a long way towards explaining a lot of the bugs.   Bert's task was made a lot easier by Pieter Br
}{\f2 anderhorst, who separated the MSDOS-specific code from Fractint-for-DOS's fractal generator modules, making a Windows }{\f2 
port of the package possible.   Mark Peterson helped track down and eliminate a lot of the bugs that were in the original program, and has since added several new options which take advantage of the capabilities of the Windows environment.   
\par }\pard \sl240 {\f2 
\par }\pard \sl240 {\f2 Fractint for Windows is based heavily on (and uses the fractal generator engines straight out of) Fractint-for-DOS.  A partial list of the authors of Fractint-for-DOS, taken from Fractint version 17.1, includes: 
\par }\pard \sl240 {\f2 
\par }{\f2 ------------------  Primary Authors (this changes }{\f2 over time)  ----------------- 
\par }{\f2 Bert Tyler\tab \tab - CompuServe (CIS) ID: [73477,433]  
\par }{\f2 Timothy Wegner   \tab - CIS ID: [71320,675]   Internet: twegner@mwunix.mitre.org 
\par }{\f2 Mark Peterson\tab \tab - CIS ID: [70441,3353] 
\par }{\f2 Pieter Branderhorst\tab - CIS ID: [72611,2257] 
\par }{\f2                  ---------  Contributing Authors ---------- 
\par }\pard {\f2 
\par }{\f2  Michael Abrash \tab 360x480x256, 320x400x256 VGA video modes
\par }{\f2  Joseph Albrecht\tab Tandy video, CGA video speedup
\par }{\f2  Kevin Allen\tab \tab Finite attractor and bifurcation engine
\par }{\f2  Steve Bennett\tab \tab restore-from-disk logic}{\f2 
\par }{\f2  Rob Beyer\tab \tab [71021,2074] Barnsley IFS, Lorenz fractals
\par }{\f2  Mike Burkey\tab \tab 376x564x256, 400x564x256, and 832x612x256 VGA video modes
\par }{\f2  John Bridges\tab \tab [75300,2137] superVGA support, 360x480x256 mode
\par }{\f2  Brian Corbino\tab \tab [71611,702] Tandy 1000 640x200x16 video mode
\par }{\f2  Lee Crocker\tab \tab [73407,2030] Fast Newton, Inversion, Decomposition..
\par }{\f2  Monte Davis\tab \tab [71450,3542] Documentation
\par }{\f2  Chuck Ebbert\tab \tab [76306,1226] cmprsd & sqrt logmap, fpu speedups
\par }{\f2  Richard Finegold\tab [76701,153] 8/16/../256-Way Decomposition option
\par }{\f2  Frank Fussen}{\f2 egger\tab Mandelbrot speedups
\par }{\f2  Mike Gelvin\tab \tab [73337,520] Mandelbrot speedups
\par }{\f2  Lawrence Gozum\tab [73437,2372] Tseng 640x400x256 Video Mode
\par }{\f2  David Guenther   \tab [70531,3525] Boundary Tracing algorithm
\par }{\f2  Norman Hills\tab \tab [71621,1352] Ranges option
\par }{\f2  Richard Hughes\tab [70461,3272] "inside=", "outside=" coloring options
\par }{\f2  Mike Kaufman\tab \tab [kaufman@eecs.nwu.edu] mouse support, other features
\par }{\f2  Wesley Loewer\tab \tab fast floating-point Mandelbrot/Julia logic
\par }{\f2  Adrian Mariano\tab \tab [adrian@u.washington.edu] Diffusion & L-Systems
\par }{\f2  Charles Mar}{\f2 slett\tab [75300,1636] VESA video and IIT math chip support
\par }{\f2  Joe McLain\tab \tab [75066,1257] TARGA Support, color-map files
\par }{\f2  Bob Montgomery\tab [73357,3140] (Author of VPIC) Fast text I/O routines
\par }{\f2  Bret Mulvey\tab \tab plasma clouds
\par }{\f2  Roy Murphy\tab \tab [76376,721] Lyapunov Fractals
\par }{\f2  Ethan Nagel\tab \tab [70022,2552] Palette editor, integrated help/doc system
\par }{\f2  Jonathan Osuch\tab [73277,1432] IIT detect
\par }{\f2  Marc Reinig\tab \tab [72410,77] Lots of 3D options
\par }{\f2  Kyle Powell\tab \tab [76704,12] 8514/A Support
\par }{\f2  Matt Saucier\tab \tab [72371,3101] Printer Support
\par }{\f2  Herb Savag}{\f2 e\tab \tab [71640,455] 'inside=bof60', 'inside=bof61' options
\par }{\f2  Lee Skinner\tab \tab Tetrate, Spider, Mandelglass fractal types and more
\par }{\f2  Dean Souleles\tab \tab [75115,1671] Hercules Support
\par }{\f2  Kurt Sowa\tab \tab [73467,2013] Color Printer Support
\par }{\f2  Hugh Steele\tab \tab cyclerange feature
\par }{\f2  Chris Taylor\tab \tab Floating&Fixed-point algorithm speedups, Tesseral Option
\par }{\f2  Scott Taylor\tab \tab [72401,410] (DGWM18A) PostScript, Kam Torus, many fn types.
\par }{\f2  Bill Townsend\tab \tab Mandelbrot Speedups
\par }{\f2  Paul Varner\tab \tab [73237,441] Extended Memory support for Disk Video
\par }{\f2  Dave War}{\f2 ker\tab \tab Integer Mandelbrot Fractals concept
\par }{\f2  Phil Wilson\tab \tab [76247,3145] Distance Estimator, Bifurcation fractals
\par }{\f2  Nicholas Wilt\tab \tab Lsystem speedups
\par }{\f2  Richard Wilton\tab \tab Tweaked VGA Video modes
\par }\pard \sl240 {\f2                   ... 
\par }{\f2 Byte Magazine\tab \tab Tweaked VGA Modes 
\par }{\f2 MS-Kermit\tab \tab Keyboard Routines 
\par }{\f2 PC Magazine\tab \tab Sound Routines
\par }{\f2 PC Tech Journal  \tab CPU, FPU Detectors
\par }{\f2 
\par }{\f2 
\par }}